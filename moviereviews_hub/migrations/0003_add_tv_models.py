# Generated by Django 5.2.1 on 2025-11-01 01:13

import django.contrib.postgres.fields
import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('moviereviews_hub', '0002_movie_slug'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='TvShowModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(unique=True)),
                ('description', models.TextField(blank=True)),
                ('genres', models.JSONField(default=list)),
                ('num_seasons', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)])),
            ],
        ),

        # Safe drop: starring_actors
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='ALTER TABLE "moviereviews_hub_movie" DROP COLUMN IF EXISTS "starring_actors";',
                    reverse_sql=migrations.RunSQL.noop,
                ),
            ],
            state_operations=[
                migrations.RemoveField(
                    model_name='movie',
                    name='starring_actors',
                ),
            ],
        ),

        # Safe add: actors (as Postgres text[]). If it already exists, this is a no-op.
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='ALTER TABLE "moviereviews_hub_movie" ADD COLUMN IF NOT EXISTS "actors" text[];',
                    reverse_sql=migrations.RunSQL.noop,
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name='movie',
                    name='actors',
                    field=django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(max_length=200),
                        default=list,
                        size=None
                    ),
                ),
            ],
        ),

        migrations.AddField(
            model_name='review',
            name='user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='movie',
            name='director',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), default=list, size=None),
        ),
        migrations.AlterField(
            model_name='movie',
            name='genres',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=150), default=list, size=None),
        ),
        migrations.AlterField(
            model_name='review',
            name='rating',
            field=models.FloatField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='review',
            name='rating_justification',
            field=models.TextField(blank=True, default=''),
        ),
        migrations.CreateModel(
            name='TvShowSeason',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('season_number', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('num_episodes', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)])),
                ('show_title', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='seasons', to='moviereviews_hub.tvshowmodel')),
            ],
            options={
                'ordering': ['season_number'],
                'unique_together': {('show_title', 'season_number')},
            },
        ),
    ]
